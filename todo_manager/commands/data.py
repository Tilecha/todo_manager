import json
from flask import Flask, request, jsonify
from telegram import Update
from telegram.ext import ContextTypes
from datetime import date
from commands.load import load_tasks
from commands.save import save_tasks
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes

async def open_webapp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ–∫–µ—Ä", web_app=WebAppInfo(url="https://todo-manager-n3vu.onrender.com"))]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ–∫–µ—Ä:", reply_markup=reply_markup)


app = Flask(__name__)

@app.route("/get_tasks")
def get_tasks():
    return jsonify(load_tasks())

@app.route("/add_task", methods=["POST"])
def add_task():
    data = request.get_json()
    task = {
        "text": data.get("text", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
        "tags": data.get("tags", []),
        "done": False,
        "created": date.today().isoformat()
    }
    tasks = load_tasks()
    tasks.append(task)
    save_tasks(tasks)
    return jsonify({"success": True})



async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.web_app_data:
        return
    try:
        data = json.loads(update.message.web_app_data.data)
        if data.get("action") == "add":
            task = {
                "text": data.get("text", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                "tags": data.get("tags", []),
                "done": False,
                "created": date.today().isoformat()
            }
            tasks = load_tasks()
            tasks.append(task)
            save_tasks(tasks)
            await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n{task['text']}\nüè∑Ô∏è {', '.join(task['tags']) if task['tags'] else '–±–µ–∑ —Ç–µ–≥–æ–≤'}")
        elif data.get("action") == "delete":
            index = data.get("index")
            tasks = load_tasks()
            if 0 <= index < len(tasks):
                deleted = tasks.pop(index)
                save_tasks(tasks)
                await update.message.reply_text(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {deleted['text']}")
            return
        elif data.get("action") == "edit":
            index = data.get("index")
            new_text = data.get("text")

            if index is None or not isinstance(index, int):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏.")
                return

            if not new_text:
                await update.message.reply_text("‚ùå –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø—É—Å—Ç–æ–π.")
                return

            tasks = load_tasks()

            if 0 <= index < len(tasks):
                old_text = tasks[index]["text"]
                tasks[index]["text"] = new_text
                save_tasks(tasks)
                await update.message.reply_text(f"‚úèÔ∏è –ó–∞–¥–∞—á–∞ –∏–∑–º–µ–Ω–µ–Ω–∞:\n\n–î–æ: {old_text}\n–ü–æ—Å–ª–µ: {new_text}")
            else:
                await update.message.reply_text("‚ùå –ò–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")

        elif data.get("action") == "clean":
            save_tasks([])
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω.")

        elif data.get("action") == "done":
            tasks = load_tasks()
            index = data.get("index")
            tasks[index]["done"]=not tasks[index]["done"]
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if tasks[index]["done"] else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
            await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω—ë–Ω: {status} ‚Äî {tasks[index]['text']}")

        elif data.get("action") == "filter":
            tasks = load_tasks()
            tag = data.get("tag").lower().strip()
            matched_tasks = []
            for i, task in enumerate(tasks, 1):
                for t in task.get("tags", []):
                    if t.lower() == tag:
                        matched_tasks.append((i,task))
                        break
            if not matched_tasks:
                await update.message.reply_text(f"–ó–∞–¥–∞—á —Å —Ç–µ–≥–æ–º '{tag}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            else:
                response = f"–ó–∞–¥–∞—á–∏ —Å —Ç–µ–≥–æ–º '{tag}':\n"
                for i, task in matched_tasks:
                    status = "‚úÖ" if task["done"] else "‚ùå"
                    tags = ", ".join(task["tags"]) if task["tags"] else "–ë–µ–∑ —Ç–µ–≥–æ–≤"
                    response += f"{i}. {status} {task['text']}, —Ç–µ–≥–∏: {tags}\n"
                await update.message.reply_text(response)
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏.")
        print("–û—à–∏–±–∫–∞:", e)